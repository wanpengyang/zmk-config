/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layers

#define MAC    0
#define LOWER    1
#define RAISE    2
#define TRI    3
#define WIN    4
#define NUM    5
#define BLE    6
#define NAV    7

// Short versions
// Screen Shot

#define WIN_SC  LG(LS(S))
#define OSX_SC  LG(LS(N4))

// switch to other windows of the same app

#define S_WIN    LA(GRAVE)
#define BT0     BT_SEL 0
#define BT1     BT_SEL 1
#define BT2     BT_SEL 2
#define BT3     BT_SEL 3
#define BT4     BT_SEL 4
#define VOLUP   C_VOL_UP
#define VOLDN   C_VOL_DN
#define VOLMT   C_MUTE

/* 
 * Assign the cs-gpios pin to 4.
 * Uncomment these next few lines if implementing nice!view Displays
 */

nice_view_spi: &spi0 {
    //	compatible = "nordic,nrf-spim";
    //	pinctrl-0 = <&spi0_default>;
    //	pinctrl-1 = <&spi0_sleep>;
    //	pinctrl-names = "default", "sleep";

    cs-gpios = <&pro_micro 1 GPIO_ACTIVE_HIGH>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_quit_app_win {
            timeout-ms = <50>;
            key-positions = <13 14>;
            layers = <WIN>;
            bindings = <&kp LA(F4)>;
        };

        Raycast {
            bindings = <&kp LG(SPACE)>;
            key-positions = <31 32 33>;
        };

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <37 38>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <38 39>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <40 39>;
        };

        tognav {
            bindings = <&tog NAV>;
            key-positions = <47 48>;
        };

        clipboard_history {
            bindings = <&kp LG(LA(V))>;
            key-positions = <40 41>;
        };
    };

    macros {
        mvd: mvd {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            label = "Move Display";
            wait-ms = <20>;
            tap-ms = <20>;
            bindings =
                <&macro_press>,
                <&kp LGUI &kp LCTRL &kp LALT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LGUI &kp LCTRL &kp LALT>,
                <&macro_tap>,
                <&tog NAV>;
        };
        mvw: mvw {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>; // Must be 1
            label = "Move Window";
            wait-ms = <20>;
            tap-ms = <20>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LALT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LCTRL &kp LALT>;

            // <&macro_tap &tog 10>;
        };
        caps_macro: caps_macro {
            compatible = "zmk,behavior-macro";
            label = "caps_macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <200>;
            bindings = <&kp CAPS>;
        };
        globe_macro: globe_macro {
            compatible = "zmk,behavior-macro";
            label = "globe_macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <200>;
            bindings = <&kp LC(SPACE)>;
        };
        temp_shift: tempshift_macro{
            compatible = "zmk,behavior-macro";
            label = "tempshift_macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <200>;
            bindings = <&macro_press &mo 0 &kp LSHFT>
            , <&macro_pause_for_release>
            , <&macro_release &mo 0 &kp LSHFT>
            ;
        };
        
    };

    behaviors {
        sc: shift_caps {
            compatible = "zmk,behavior-hold-tap";
            label = "shiftcaps";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&caps_macro>;
        };
        td_mt: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MOD_TAP";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHIFT>, <&caps_macro>;
        };
        tdw_Q: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "WIN_QUIT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&kp LA(F4)>;
        };
        tdx_Q: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "MAC_QUIT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp Q>, <&kp LG(Q)>;
        };
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            require-prior-idle-ms = <125>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        td: tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "TD NAV";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp PLUS>, <&tog NAV>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_mac_layer {
            label = " MAC";
            bindings = <
&kp ESC    &kp N1  &kp N2       &kp N3        &kp N4         &kp N5                                            &kp N6            &kp N7         &kp N8      &kp N9       &kp N0    &kp BSPC
&kp TAB    &tdx_Q  &kp W        &kp E         &kp R          &kp T                                             &kp Y             &kp U          &kp I       &kp O        &kp P     &kp BSLH
&kp GRAVE  &kp A   &hm LCTRL S  &hm LALT D    &hm LGUI F     &kp G                                             &kp H             &hm LGUI J     &hm RALT K  &hm RCTRL L  &kp SEMI  &kp SQT
&td_mt     &kp Z   &kp X        &kp C         &kp V          &kp B           &lt NUM UNDER    &td              &kp N             &kp M          &kp COMMA   &kp DOT      &kp FSLH  &kp RSHFT
                                &globe_macro  &lt RAISE TAB  &hm LSHIFT RET  &lt LOWER MINUS  &lt LOWER EQUAL  &hm RSHIFT SPACE  &lt RAISE RET  &mo BLE
            >;
        };

        lower_layer {
            label = " Lower";
            bindings = <
&kp LG(LA(SPACE))  &kp LC(LA(Z))  &kp LC(LA(X))  &kp LC(LA(V))  &kp LC(LA(M))  &kp LC(LA(H))                            &trans     &trans    &trans     &trans    &trans     &trans
&trans             &kp EXCL       &kp AT         &kp POUND      &kp DOLLAR     &kp PERCENT                              &kp CARET  &kp AMPS  &kp STAR   &kp LPAR  &kp RPAR   &kp PIPE
&kp TILDE          &kp N1         &kp N2         &kp N3         &kp N4         &kp N5                                   &kp LBKT   &kp RBKT  &kp COMMA  &kp DOT   &kp COLON  &kp DQT
&trans             &kp N6         &kp N7         &kp N8         &kp N9         &kp N0         &kp LC(UP)  &kp LC(DOWN)  &kp LBRC   &kp RBRC  &kp LT     &kp GT    &kp QMARK  &trans
                                                 &trans         &trans         &trans         &temp_shift      &temp_shift        &trans     &trans    &trans
            >;
        };

        raise_layer {
            label = " Raise";
            bindings = <
&trans  &trans     &trans     &trans     &kp LG(LS(N4))  &trans                       &trans     &trans      &trans    &kp C_BRI_DN  &kp C_BRI_UP   &kp C_VOL_UP
&trans  &trans     &kp LG(W)  &trans     &trans          &trans                       &kp PG_UP  &kp PG_DN   &kp HOME  &kp END       &kp LG(LS(P))  &kp C_VOL_DN
&trans  &kp LG(A)  &kp LG(S)  &trans     &kp LG(F)       &trans                       &kp LEFT   &kp DOWN    &kp UP    &kp RIGHT     &kp UP         &trans
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)       &kp LG(B)  &trans  &mvw RET  &mvw LEFT  &mvw RIGHT  &trans    &kp LEFT      &kp DOWN       &kp RIGHT
                              &trans     &trans          &trans     &trans  &trans    &trans     &kp DEL     &trans
            >;
        };

        tri_layer {
            label = " TRI";
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                  &kp F6  &kp F7     &kp F8     &kp F9  &kp F10  &kp F11
&trans  &none   &none   &none   &none   &none                   &none   &none      &kp VOLUP  &none   &none    &kp F12
&trans  &none   &none   &none   &none   &none                   &none   &none      &kp VOLDN  &none   &none    &none
&trans  &none   &none   &none   &none   &none   &trans  &trans  &none   &kp VOLMT  &none      &none   &none    &trans
                        &trans  &trans  &trans  &trans  &trans  &trans  &trans     &tog WIN
            >;
        };

        win_layer {
            label = " WIN";
            bindings = <
&kp ESC    &kp N1  &kp N2      &kp N3      &kp N4         &kp N5                                           &kp N6           &kp N7          &kp N8      &kp N9      &kp N0    &kp BSPC
&kp TAB    &tdw_Q  &kp W       &kp E       &kp R          &kp T                                            &kp Y            &kp U           &kp I       &kp O       &kp P     &kp BSLH
&kp GRAVE  &kp A   &hm LGUI S  &hm LALT D  &hm LCTRL F    &kp G                                            &kp H            &hm LCTRL J     &hm RALT K  &hm LGUI L  &kp SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X       &kp C       &kp V          &kp B          &lt NUM UNDER    &mt LGUI PLUS    &kp N            &kp M           &kp COMMA   &kp DOT     &kp FSLH  &kp RSHFT
                               &tog NAV    &lt RAISE TAB  &ht LSHFT RET  &lt LOWER MINUS  &lt LOWER EQUAL  &ht RSHFT SPACE  &lt RAISE BSPC  &mo BLE
            >;
        };

        numpad_layer {
            label = " NumPad";
            bindings = <
&trans  &none  &none  &none   &none   &none                   &none   &none    &kp ASTRK  &kp SLASH  &none      &none
&trans  &none  &none  &none   &none   &none                   &none   &kp N7   &kp N8     &kp N9     &kp MINUS  &none
&trans  &none  &none  &none   &none   &none                   &none   &kp N4   &kp N5     &kp N6     &kp PLUS   &none
&trans  &none  &none  &none   &none   &none   &trans  &trans  &none   &kp N1   &kp N2     &kp N3     &kp EQUAL  &trans
                      &trans  &trans  &trans  &trans  &trans  &kp N0  &kp DOT  &none
            >;
        };

        firmware_layer {
            label = " BLE";
            bindings = <
&bt BT0      &bt BT1     &bt BT2  &bt BT3  &bt BT4  &none                           &bt BT0  &bt BT1  &bt BT2  &bt BT3  &bt BT4     &none
&bootloader  &sys_reset  &none    &none    &none    &none                           &none    &none    &none    &none    &sys_reset  &bootloader
&none        &none       &none    &none    &none    &none                           &none    &none    &none    &none    &none       &none
&none        &none       &none    &none    &none    &none   &bt BT_CLR  &bt BT_CLR  &none    &none    &none    &none    &none       &none
                                  &none    &none    &trans  &trans      &trans      &trans   &none    &none
            >;
        };

        NAV {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans           &trans            &trans             &trans    &trans    &kp PAGE_UP
&trans  &trans  &trans  &trans  &trans  &trans                  &trans           &trans            &trans             &trans    &trans    &kp PAGE_DOWN
&trans  &trans  &trans  &trans  &trans  &trans                  &trans           &mvd LEFT         &mvd RIGHT         &trans    &kp UP    &tog NAV
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LC(LA(RET))  &kp LC(LA(LEFT))  &kp LC(LA(RIGHT))  &kp LEFT  &kp DOWN  &kp RIGHT
                        &trans  &trans  &trans  &trans  &trans  &trans           &trans            &trans
            >;

            label = "NAV";
        };
    };
};
